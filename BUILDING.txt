================================================================================
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
================================================================================

            ====================================================
            Construindo o Apache Tomcat 8.5 Servlet/JSP Container
            ====================================================

Este projeto é um fork do Apache Tomcat 8.5.

Para construir uma versão binária, siga os passos:


(1) Fazer download e instalar o JDK (Java Development Kit)

 1. se o JDK já está instalado, pule para o passo (2).

 2. Download da version 8 do Java Development Kit (JDK).

 3. Instalar o JDK.

 4. Adicionar variável de ambiente JAVA_HOME apontando para onde está instalado o JDK.


(2) Instalar o Apache Ant versão 1.9.5 ou superior.

 1. Se o Apache Ant já estiver instalado, pule para o passo (3).

 2. Download a binary distribution of Ant from:

        http://ant.apache.org/bindownload.cgi

 3. Descompact o arquivo em um local de sua preferência.

    No restante do documento nos referiremos caminho completo do diretório
    onde você colocou o ANT como "${ant.home}".

 4. Crie a variável de ambiente ANT_HOME e aponte para ${ant.home}.

 5. Modifique a variável de ambiente PATH para incluir o diretório ${ant.home}/bin.
    Isso deixa o comando "ant" disponível em qualquer lugar.


(3) Construindo o Tomcat 8.5

(3.1) Checkout do código fonte do Tomcat 8.5

Faça checkout no repositório original no SVN, ou faça download e descompacte o fonte,
ou faça checkout do espelho do repositório original no GitHub.

 *  URL do repositório SVN do Tomcat:

        http://svn.apache.org/repos/asf/tomcat/tc@VERSION_MAJOR_MINOR@.x/trunk/

 *  Para fazer download do código:

        http://tomcat.apache.org/download-@VERSION_MAJOR@0.cgi

 *  URL do repositório Git do Tomcat 8.5:

        https://github.com/apache/tomcat85

O local onde o código do Tomcat está será referenciado como: ${tomcat.source}.


(3.2) Construindo

 1. O build pode ser configurado criando o arquivo ${tomcat.source}/build.properties.

    É recomendável sempre criar o arquivo. Você deve iniciar o arquivo com o
    seguinte conteúdo:

        # ----- Default Base Path for Dependent Packages -----
        # Substitua este caminho com o diretório onde os binários de dependências
        # devem ser baixados
        base.path=/home/me/algum-lugar-para-baixar

 2. Configure o base.path property e adicione no arquivo
    ${tomcat.source}/build.properties.

    A propriedade base.path property especifica onde as dependencias obrigatórias
    do Tomcat para construir-lo serão baixadas. É recomendado que este local
    seja fora da árvore local de diretórios para que você não precise baixar
    as bibliotecas a todo momento.

* NOTE: O valor padrão da propriedade base.path configura o script de construção
  para fazer o download das bibliotecas necessárias para construir o Tomcat no 
  diretório ${user.home}/tomcat-build-libs.

* NOTE: Usuários que acessam a internet através de um proxy devem usar o arquivo
  de propriedades para indicar ao Ant a configuração do proxy.

  As seguintes propriedades devem ser adicionadas no arquivo ${tomcat.source}/build.properties:

        proxy.use=true
        proxy.host=proxy.domain
        proxy.port=8080
        proxy.user=username
        proxy.password=password

  Veja a documentação do Apache Ant para mais detalhes sobre a task <setproxy>.

 3. Vá ao diretório do código fonte e rode o Ant:

        cd ${tomcat.source}
        ant

    Isso irá executar a target "deploy" do build.xml.

    Uma vez que o build foi realizado com sucesso, uma versão do Tomcat
    será criada no diretório ${tomcat.source}/output/build e poderá ser
    iniciada e parada através dos scripts respectivos para isso.

    Note que o build inclui a documentação do Tomcat no em output/build/webapps/docs.

    Você pode especificar outro caminho de saída especificando a propriedade
    "tomcat.output" no arquivo build.properties.

* NOTE: Não execute o build com um root user. Construir e rodar o Tomcat não requer
  privilégios especiais.


(4) Atualizando o código fonte e fazendo o build novamente

É recomendado que você atualize regularmente o fonte do Tomcat 8.5
usando um cliente SVN ou Git.

Para reconstruir rapidamente apenas códigos modificado utilize:

    cd ${tomcat.source}
    ant


(5) Builds especiais

Existem diversos targets no Tomcat úteis para serem chamados separadamente,
outros que não são incluídos no build mas estão na construção completa.

(5.1) Building da documentação

A documentação da aplicação web é construída durante o "deploy".

Mas pode ser reconstruída rapidamente utilizando o comando:

    cd ${tomcat.source}
    ant build-docs

A saída deste comando irá exibir o seguinte diretório:

    output/build/webapps/docs


A documentação da API (Javadoc) é construída durante o "release". Mas
pode ser facilmente constrída separadamente com o comando:

    cd ${tomcat.source}
    ant javadoc

A saída deste comando irá exibir o seguinte diretório:

    output/dist/webapps/docs/api
    output/dist/webapps/docs/elapi
    output/dist/webapps/docs/jspapi
    output/dist/webapps/docs/servletapi


(5.2) Building extras (commons-logging, webservices etc.)

Os componetes são documentados em "Additional Components"
(extras.html) pagina de documentação. Eles são construídos no "release".

Você pode construir eles utilizando os seguintes comandos:

    cd ${tomcat.source}
    ant extras

(5.3) Building dos pacotes incorporados

Essa construção acontece no "release".

Você pode construir eles utilizando os seguintes comandos:

    cd ${tomcat.source}
    ant embed


(6) Building a full release (as provided via the ASF download pages)

    A full release includes the Windows installer which requires a Windows
    environment to be available to create it. If not building in a Windows
    environment, the build scripts assume that Wine is available. If this is not
    the case, the skip.installer property may be set to skip the creation of the
    Windows installer.

 1. Configure GPG, if needed

    If the released artifacts have to be cryptographically signed with a
    PGP signature, like the official ASF releases are, the following
    property can be added to the build.properties file:

        # Location of GPG executable (used only for releases)
        gpg.exec=/path/to/gpg

    You do not need it if you do not plan to sign the release.

    If "gpg.exec" property does not point to an existing file, it will be
    ignored and this feature will be disabled.

    You will be prompted for the GPG passphrase when the release build
    starts, unless "gpg.passphrase" property is set.

 2. If building the Windows installer

    If running the build in a UAC enabled environment, building the Windows
    installer requires elevated privileges. The simplest way to do this is to
    open the command prompt used for the build with the "Run as administrator"
    option.

 3. Configure the code signing service

    ASF committers performing official releases will need to configure the code
    signing service so that the Windows installer is signed during the build
    process. The following properties need to be added to the build.properties
    file:

        # Location of GPG executable (used only for releases)
        # Code signing of Windows installer
        do.codesigning=true
        codesigning.user=request-via-pmc
        codesigning.pwd=request-via-pmc
        codesigning.partnercode=request-via-pmc
        codesigning.service=Microsoft Windows Signing

    Release managers will be provided with the necessary credentials by the PMC.
    It will also be necessary to enable TLS 1.1 and TLS 1.2 by default (they are
    disabled by default on Java 7) for the build process to communicate with the
    code signing service. The simplest way is by setting the ANT_OPTS
    environment variable. E.g. (for Windows):

    set ANT_OPTS=-Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2

 4. Build the release:

    cd ${tomcat.source}
    ant release


(7) Tests

(7.1) Running Tomcat tests

Tomcat includes a number of junit tests. The tests are not run when a
release is built. There is separate command to run them.

To run the testsuite use the following command:

    cd ${tomcat.source}
    ant test

It is advisable to redirect output of the above command to a file for later
inspection.

The JUnit reports generated by the tests will be written to the following
directory:

    output/build/logs

By default the testsuite is run three times to test 3 different
implementations of Tomcat connectors: NIO, NIO2 and APR. (If you are not
familiar with Tomcat connectors, see config/http.html in documentation for
details).

The 3 runs are enabled and disabled individually by the following
properties, which all are "true" by default:

    execute.test.nio=true
    execute.test.nio2=true
    execute.test.apr=true

The APR connector can be tested only if Tomcat-Native library binaries are
found by the testsuite. The "test.apr.loc" property specifies the directory
where the library binaries are located.

By default the "test.apr.loc" property specifies the following location:

    output/build/bin/native/

If you are on Windows and want to test the APR connector you can put the
tcnative-1.dll file into ${tomcat.source}/bin/native/ and it will be copied
into the above directory when the build runs.

The unit tests include tests of the clustering functionality which require
multicast to be enabled. There is a simple application provided in the Tomcat
test source (org.apache.catalina.tribes.TesterMulticast) that can be used to
check if a machine supports multicast. Notes on enabling multicast for different
operating systems are provided in the Javadoc for that class.


(7.2) Running a single test

It is possible to run a single JUnit test class by adding the "test.entry"
property to the build.properties file. The property specifies the name of
the test class.

For example:

    test.entry=org.apache.catalina.util.TestServerInfo

It is possible to further limit such run to a number of selected test
methods by adding "test.entry.methods" property. The property specifies a
comma-separated list of test case methods.

For example:

    test.entry=org.apache.el.lang.TestELArithmetic
    test.entry.methods=testMultiply01,testMultiply02


(7.3) Running a set of tests

It is possible to run a set of JUnit test classes by adding the "test.name"
property to the build.properties file. The property specifies an Ant
includes pattern for the fileset of test class files to run.

The default value is "**/Test*.java", so all test classes are being
executed (with few exceptions - see build.xml for several exclude patterns).

You can include multiple patterns by concatenating them with a comma (",")
as the separator.

For example:

    test.name=**/TestSsl.java,**/TestWebSocketFrameClientSSL.java


(7.4) Other configuration options

 1. It is possible to configure the directory where JUnit reports are
 written to. It is configured by "test.reports" property. The default
 value is

        output/build/logs

 2. It is possible to enable generation of access log file when the tests
 are run. This is off by default and can be enabled by the following
 property:

        test.accesslog=true

 The "access_log.<date>" file will be written to the same directory as
 JUnit reports,

        output/build/logs

 3. The testsuite respects logging configuration as configured by
 ${tomcat.source}/conf/logging.properties

 The log files will be written to the temporary directory used by the
 tests,

        output/test-tmp/logs

 4. It is possible to configure formatter used by JUnit reports.
 Configuration properties are "junit.formatter.type",
 "junit.formatter.extension" and "junit.formatter.usefile".

 For example the following property disables generation of separate report
 files:

        junit.formatter.usefile=false

 5. It is possible to speed up testing by letting JUnit to run several
 tests in parallel.

 This is configured by setting "test.threads" property. The recommended
 value is one thread per core.

 6. Optional support is provided for the Cobertura code coverage tool.

NOTE: Cobertura is licensed under GPL v2 with parts of it being under
      Apache License v1.1. See http://cobertura.sf.net for details. Using it
      during Tomcat build is optional and is off by default.

 Cobertura can be enabled using the following properties:

        test.cobertura=true
        test.threads=1

 Using Cobertura currently requires setting test.threads configuration
 property to the value of 1. Setting that property to a different value
 will disable code coverage.

 The report files by default are written to

        output/coverage

 7. The performance tests are written to run reasonably powerful machines (such
    as a developer may use day to day) assuming no other resource hungry
    processes are running.

    These assumptions are not always true (e.g. on CI systems running in a
    virtual machine) so the performance tests may be disabled by using the
    following property:

        test.excludePerformance=true

 8. Some tests include checks that the access log valve entries are as expected.
    These checks include timings. On slower / loaded systems these checks will
    often fail. The checks may be relaxed by using the following property:

        test.relaxTiming=true

 9. It is known that some platforms (e.g. OSX El Capitan) require IPv4 to
    be the default for the multicast tests to work. This is configured by
    the following property:

        java.net.preferIPv4Stack=true

 10. It is possible to control whether the output of the tests is displayed
     on the console or not. By default it is displayed and can be disabled
     by the following property:

        test.verbose=true

(8) Source code checks

(8.1) Checkstyle

NOTE: Checkstyle is licensed under LGPL. Using Checkstyle during Tomcat
      build is optional and is off by default.

      See http://checkstyle.sourceforge.net/ for more information.

Tomcat comes with a Checkstyle configuration that tests its source code
for certain conventions, like presence of the license header.

To enable Checkstyle, add the following property to build.properties file:

    execute.validate=true

Once Checkstyle is enabled, the check will be performed automatically
during the build. The check is run before compilation of the source code.

To speed-up repeated runs of this check, a cache is configured. The cache
is located in the following directory:

    output/res/checkstyle

It is possible to run the check separately by calling the "validate"
target. The command is:

    cd ${tomcat.source}
    ant -Dexecute.validate=true validate


(8.2) FindBugs

NOTE: FindBugs is licensed under LGPL. Using Findbugs during Tomcat build is
      optional and is off by default.

      See http://findbugs.sourceforge.net/ for more information.

To enable FindBugs, add the following property to build.properties file:

    execute.findbugs=true

To compile Tomcat classes and generate a FindBugs report, call the
"findbugs" target. For example:

    cd ${tomcat.source}
    ant -Dexecute.findbugs=true findbugs

The report file by default is written to

    output/findbugs


(8.3) End-of-line conventions check

You usually would not need to run this check. You can skip this section.

Apache Tomcat project has convention that all of its textual source files,
stored in Subversion repository, are marked with Subversion property
"svn:eol-style" with value of "native". This convention makes the editing
of source code on different platforms easier.

This test is used by developers to check that the source code adheres to
this convention. It verifies that the ends of lines in textual files are
appropriate for the operating system where it is run. The idea is to run
this check regularly on two different platforms and notify developers when
an inconsistency is detected.

The command to run this test is:

    cd ${tomcat.source}
    ant validate-eoln
