================================================================================
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
================================================================================

            ====================================================
            Construindo o Apache Tomcat 8.5 Servlet/JSP Container
            ====================================================

Este projeto é um fork do Apache Tomcat 8.5.

Para construir uma versão binária, siga os passos:


(1) Fazer download e instalar o JDK (Java Development Kit)

 1. se o JDK já está instalado, pule para o passo (2).

 2. Download da version 8 do Java Development Kit (JDK).

 3. Instalar o JDK.

 4. Adicionar variável de ambiente JAVA_HOME apontando para onde está instalado o JDK.


(2) Instalar o Apache Ant versão 1.9.5 ou superior.

 1. Se o Apache Ant já estiver instalado, pule para o passo (3).

 2. Download a binary distribution of Ant from:

        http://ant.apache.org/bindownload.cgi

 3. Descompact o arquivo em um local de sua preferência.

    No restante do documento nos referiremos caminho completo do diretório
    onde você colocou o ANT como "${ant.home}".

 4. Crie a variável de ambiente ANT_HOME e aponte para ${ant.home}.

 5. Modifique a variável de ambiente PATH para incluir o diretório ${ant.home}/bin.
    Isso deixa o comando "ant" disponível em qualquer lugar.


(3) Construindo o Tomcat 8.5

(3.1) Checkout do código fonte do Tomcat 8.5

Faça checkout no repositório original no SVN, ou faça download e descompacte o fonte,
ou faça checkout do espelho do repositório original no GitHub.

 *  URL do repositório SVN do Tomcat:

        http://svn.apache.org/repos/asf/tomcat/tc@VERSION_MAJOR_MINOR@.x/trunk/

 *  Para fazer download do código:

        http://tomcat.apache.org/download-@VERSION_MAJOR@0.cgi

 *  URL do repositório Git do Tomcat 8.5:

        https://github.com/apache/tomcat85

O local onde o código do Tomcat está será referenciado como: ${tomcat.source}.


(3.2) Construindo

 1. O build pode ser configurado criando o arquivo ${tomcat.source}/build.properties.

    É recomendável sempre criar o arquivo. Você deve iniciar o arquivo com o
    seguinte conteúdo:

        # ----- Default Base Path for Dependent Packages -----
        # Substitua este caminho com o diretório onde os binários de dependências
        # devem ser baixados
        base.path=/home/me/algum-lugar-para-baixar

 2. Configure o base.path property e adicione no arquivo
    ${tomcat.source}/build.properties.

    A propriedade base.path property especifica onde as dependencias obrigatórias
    do Tomcat para construir-lo serão baixadas. É recomendado que este local
    seja fora da árvore local de diretórios para que você não precise baixar
    as bibliotecas a todo momento.

* NOTE: O valor padrão da propriedade base.path configura o script de construção
  para fazer o download das bibliotecas necessárias para construir o Tomcat no 
  diretório ${user.home}/tomcat-build-libs.

* NOTE: Usuários que acessam a internet através de um proxy devem usar o arquivo
  de propriedades para indicar ao Ant a configuração do proxy.

  As seguintes propriedades devem ser adicionadas no arquivo ${tomcat.source}/build.properties:

        proxy.use=true
        proxy.host=proxy.domain
        proxy.port=8080
        proxy.user=username
        proxy.password=password

  Veja a documentação do Apache Ant para mais detalhes sobre a task <setproxy>.

 3. Vá ao diretório do código fonte e rode o Ant:

        cd ${tomcat.source}
        ant

    Isso irá executar a target "deploy" do build.xml.

    Uma vez que o build foi realizado com sucesso, uma versão do Tomcat
    será criada no diretório ${tomcat.source}/output/build e poderá ser
    iniciada e parada através dos scripts respectivos para isso.

    Note que o build inclui a documentação do Tomcat no em output/build/webapps/docs.

    Você pode especificar outro caminho de saída especificando a propriedade
    "tomcat.output" no arquivo build.properties.

* NOTE: Não execute o build com um root user. Construir e rodar o Tomcat não requer
  privilégios especiais.


(4) Atualizando o código fonte e fazendo o build novamente

É recomendado que você atualize regularmente o fonte do Tomcat 8.5
usando um cliente SVN ou Git.

Para reconstruir rapidamente apenas códigos modificado utilize:

    cd ${tomcat.source}
    ant


(5) Builds especiais

Existem diversos targets no Tomcat úteis para serem chamados separadamente,
outros que não são incluídos no build mas estão na construção completa.

(5.1) Building da documentação

A documentação da aplicação web é construída durante o "deploy".

Mas pode ser reconstruída rapidamente utilizando o comando:

    cd ${tomcat.source}
    ant build-docs

A saída deste comando irá exibir o seguinte diretório:

    output/build/webapps/docs


A documentação da API (Javadoc) é construída durante o "release". Mas
pode ser facilmente constrída separadamente com o comando:

    cd ${tomcat.source}
    ant javadoc

A saída deste comando irá exibir o seguinte diretório:

    output/dist/webapps/docs/api
    output/dist/webapps/docs/elapi
    output/dist/webapps/docs/jspapi
    output/dist/webapps/docs/servletapi


(5.2) Building extras (commons-logging, webservices etc.)

Os componetes são documentados em "Additional Components"
(extras.html) pagina de documentação. Eles são construídos no "release".

Você pode construir eles utilizando os seguintes comandos:

    cd ${tomcat.source}
    ant extras

(5.3) Building dos pacotes incorporados

Essa construção acontece no "release".

Você pode construir eles utilizando os seguintes comandos:

    cd ${tomcat.source}
    ant embed


(6) Construindo uma versão completa (conforme explicado nas páginas da ASF)

    Uma versão completa inclui o instalador do Windows, o que requer que você
    esteja em um ambiente Windows. Se não for este o caso, os scripts de building
    irá considerar que o Wine está configurado. Por fim se nenhuma dessas opções
    estão disponíveis, então utilize a propriedade skip.installer para pular a
    criação de um instalador para o Windows.

 1. Configure o GPG, se necessário

    Se a versão completa necessitar ser assinada e criptografada com assinatura
    PGP, assim como a versão oficial ASF é, a seguinte propriedade deve ser
    adicionada ao arquivo build.properties:

        # Local do executável do GPG (usado apenas para  versões completas)
        gpg.exec=/pasta/do/gpg

    Você não precisa disso se não planeja assinar a versão.

    Se a propriedade "gpg.exec" não apontar para um arquivo existente, a assinatura
    será ignorada.

    Durante a compilação será solicitado a palavra chave ou você pode
    definir a propriedade "gpg.passphrase" com este valor.

 2. Se for construir o instalador do Windows

    Se for construir em um ambiente com UAC ativado, a construção do instalador
    do Windows irá necessitar de privilégios elevados. A maneira mais simples
    de fazer isso é abrir o terminal no qual executará o build usando a opção
    "abrir como administrador".

 3. Configurar o serviço de assinatura de código

    Para versões oficiais ASF precisará configurar o serviço de assinatura de
    código para que o instalador do Windows seja assinado durante o processo
    de build. As seguintes propriedades devem ser adicionadas ao arquivo
    build.properties:

        # Local do executável do GPG (usado apenas para  versões completas)
        # Código de assinatura para o instalador do Windows
        do.codesigning=true
        codesigning.user=request-via-pmc
        codesigning.pwd=request-via-pmc
        codesigning.partnercode=request-via-pmc
        codesigning.service=Microsoft Windows Signing

    Os gerenciadores de permissão serão fornecidos pelas credenciais do PMC.
    Também será necessário ativar TLS 1.1 e TLS 1.2 por padrão (eles veem
    desativados por padrão no Java 7) para construir o processo de comunicação
    com o serviço de assinatura de código. O caminho mais simples é setando 
    ANT_OPTS (para Windows):

    set ANT_OPTS=-Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2

 4. Construindo a versão completa::

    cd ${tomcat.source}
    ant release


(7) Testes

(7.1) Rodando os testes do Tomcat

O Tomcat contém junit testes. Os testes não são executados
na construção da versão completa. Tem um comando separado para rodar-los.

Para rodar a suíte de testes utilize o seguinte comando:

    cd ${tomcat.source}
    ant test

É aconselhável redirecionar a saída do comando acima para um arquivo
para posterior inspeção.

O relatório do JUnit gerados durante a execução dos testes se encontrarão
no diretório:

    output/build/logs

Por padrão a suite de testes é executada três vezes para 3 diferentes
implementações de connectores Tomcat: NIO, NIO2 e APR. (Se você não está
familiarizado com Tomcat connectors, veja config/http.html na documentação
para mais detalhes).

As três execuções são ativadas e desativadas individualementes pelas seguintes
propriedades, todas são "true" por default:

    execute.test.nio=true
    execute.test.nio2=true
    execute.test.apr=true

O APR connector pode ser testado apenas se os binátrios da biblioteca
Tomcat-Native forem encontrados pela suíte de testes. A propriedade
"test.apr.loc" especifíca o diretório onde a biblioteca está localizada.

Por padrão a propriedade "test.apr.loc" especifíca a seguinte localização:

    output/build/bin/native/

Se você estiver no Windows e quiser testar o APR connector você pode colocar
o arquivo tcnative-1.dll dentro de ${tomcat.source}/bin/native/ e ele será
copiado para o diretório quando rodar o build.

Os testes unitários incluem testes de clusterização, funcionalidade que requer
multicast habilitado. Existe uma simples aplicação fornecida nos códigos de 
teste do Tomcat (org.apache.catalina.tribes.TesterMulticast) que pode ser utilizado
para verificar se sua máquina suporta multicast. Notas sobre como habilitar o
multicast para diferentes sistemas opercionais são fornecidos no Javadoc desta
classe.


(7.2) Rodando um teste isoladamente

É possível rodar uma única classe de teste adicionando a propriedade
"test.entry" no arquivo build.properties. A propriedade especifíca o
nome da classe de teste.

Por exemplo:

    test.entry=org.apache.catalina.util.TestServerInfo

É possível limitar ainda mais a execução dos testes especificando quais
métodos devem ser testados através da propriedade "test.entry.methods".
O valor da propriedade pode ser separado por vírgula para adicionar
mais de um teste.

Por exemplo:

    test.entry=org.apache.el.lang.TestELArithmetic
    test.entry.methods=testMultiply01,testMultiply02


(7.3) Executando um conjunto de testes

É possível executar um conjunto de classes de testes adicionadno a
propriedade "test.name" no arquivo build.properties. to run.

Por padrão o valor é "**/Test*.java", todas as classes de testes
são executadas (com algumas exceções - veja o build.xml para
ver outros padrões de exclusão).

Você pode incluir vários padrões separando por virgula (",").

Por exemplo:

    test.name=**/TestSsl.java,**/TestWebSocketFrameClientSSL.java


(7.4) Outras opções de configuração

 1. É possível configurar o diretório onde o JUnit irá gerar os relatórios.
 Isso é configurado através da propriedade "test.reports". O valor padrão é

        output/build/logs

 2. É possível habilitar a geração de log de acesso enquanto os testes estão
 rodando. Isso é desabilitado por padrão e pode ser ativado pela a seguinte
 propriedade:

        test.accesslog=true

 O arquivo "access_log.<date>" será escrito no mesmo diretório que os relatórios
 do JUnit,

        output/build/logs

 3. A suíte de testes respeita as configurações de log encontrada em
 ${tomcat.source}/conf/logging.properties

 Os arquivos de log serão escritos no diretório temporário usado para
 testes,

        output/test-tmp/logs

 4. É possível configurar a formatação usada nos relatórios do JUnit.
 As propriedades de configuração são "junit.formatter.type",
 "junit.formatter.extension" e "junit.formatter.usefile".

 Por exemplo, a propriedade a seguir desabilita a geração de relatórios separados
 em arquivos:

        junit.formatter.usefile=false

 5. É possível aumentar a velocidade dos testes permitindo que o JUnit execute
    vários testes em paralelo.

 Isso pode ser configurado com a propriedade "test.threads". O valor recomendado
 é de uma thread por core.

 6. Optional support is provided for the Cobertura code coverage tool.

NOTE: Cobertura is licensed under GPL v2 with parts of it being under
      Apache License v1.1. See http://cobertura.sf.net for details. Using it
      during Tomcat build is optional and is off by default.

 Cobertura can be enabled using the following properties:

        test.cobertura=true
        test.threads=1

 Using Cobertura currently requires setting test.threads configuration
 property to the value of 1. Setting that property to a different value
 will disable code coverage.

 The report files by default are written to

        output/coverage

 7. The performance tests are written to run reasonably powerful machines (such
    as a developer may use day to day) assuming no other resource hungry
    processes are running.

    These assumptions are not always true (e.g. on CI systems running in a
    virtual machine) so the performance tests may be disabled by using the
    following property:

        test.excludePerformance=true

 8. Some tests include checks that the access log valve entries are as expected.
    These checks include timings. On slower / loaded systems these checks will
    often fail. The checks may be relaxed by using the following property:

        test.relaxTiming=true

 9. It is known that some platforms (e.g. OSX El Capitan) require IPv4 to
    be the default for the multicast tests to work. This is configured by
    the following property:

        java.net.preferIPv4Stack=true

 10. It is possible to control whether the output of the tests is displayed
     on the console or not. By default it is displayed and can be disabled
     by the following property:

        test.verbose=true

(8) Source code checks

(8.1) Checkstyle

NOTE: Checkstyle is licensed under LGPL. Using Checkstyle during Tomcat
      build is optional and is off by default.

      See http://checkstyle.sourceforge.net/ for more information.

Tomcat comes with a Checkstyle configuration that tests its source code
for certain conventions, like presence of the license header.

To enable Checkstyle, add the following property to build.properties file:

    execute.validate=true

Once Checkstyle is enabled, the check will be performed automatically
during the build. The check is run before compilation of the source code.

To speed-up repeated runs of this check, a cache is configured. The cache
is located in the following directory:

    output/res/checkstyle

It is possible to run the check separately by calling the "validate"
target. The command is:

    cd ${tomcat.source}
    ant -Dexecute.validate=true validate


(8.2) FindBugs

NOTE: FindBugs is licensed under LGPL. Using Findbugs during Tomcat build is
      optional and is off by default.

      See http://findbugs.sourceforge.net/ for more information.

To enable FindBugs, add the following property to build.properties file:

    execute.findbugs=true

To compile Tomcat classes and generate a FindBugs report, call the
"findbugs" target. For example:

    cd ${tomcat.source}
    ant -Dexecute.findbugs=true findbugs

The report file by default is written to

    output/findbugs


(8.3) End-of-line conventions check

You usually would not need to run this check. You can skip this section.

Apache Tomcat project has convention that all of its textual source files,
stored in Subversion repository, are marked with Subversion property
"svn:eol-style" with value of "native". This convention makes the editing
of source code on different platforms easier.

This test is used by developers to check that the source code adheres to
this convention. It verifies that the ends of lines in textual files are
appropriate for the operating system where it is run. The idea is to run
this check regularly on two different platforms and notify developers when
an inconsistency is detected.

The command to run this test is:

    cd ${tomcat.source}
    ant validate-eoln
